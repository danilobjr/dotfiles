#!/bin/bash
# File: gittoken
# Description: Sets and copies Git tokens (GitHub and GitLab) stored in $HOME/.gittoken

# Storage file
TOKEN_FILE="$HOME/.gittoken"

# Function to display help/usage information
show_usage() {
    cat <<EOF
GITTOKEN - A simple utility to store and copy Git tokens

Usage:
  gittoken <command> <flag> [token]

Commands:
  set         Set or update a token.
  cp          Copy a token to the clipboard.

Flags:
  -gh        GitHub token.
  -gl        GitLab token.

Examples:
  gittoken set -gh GH_TOKEN
      Set or update the GitHub token.

  gittoken set -gl GL_TOKEN
      Set or update the GitLab token.

  gittoken cp -gh
      Copy the GitHub token to your clipboard.

  gittoken cp -gl
      Copy the GitLab token to your clipboard.

Other Options:
  -h, --help, help   Display this help screen.
EOF
}

# Ensure at least one argument is provided
if [ $# -lt 1 ]; then
    show_usage
    exit 1
fi

# Handle help options
cmd="$1"
case "$cmd" in
  -h|--help|help)
    show_usage
    exit 0
    ;;
esac

# Helper function to update a token field with confirmation if needed
update_token() {
    local field="$1"
    local new_value="$2"

    # If the file doesn't exist, create it with default content.
    if [ ! -f "$TOKEN_FILE" ]; then
        echo "GITHUB=" > "$TOKEN_FILE"
        echo "GITLAB=" >> "$TOKEN_FILE"
    fi

    # Check for existing non-empty token for that field.
    local existing
    existing=$(grep "^$field=" "$TOKEN_FILE" | cut -d '=' -f2-)
    if [ -n "$existing" ]; then
        echo -n "A token for $field already exists. Do you want to replace it? (y/n): "
        read answer
        if [[ "$answer" != [Yy] ]]; then
            echo "Token update cancelled."
            exit 0
        fi
    fi

    # Update the token using sed with a portable delimiter.
    if grep -q "^$field=" "$TOKEN_FILE"; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s@^$field=.*@$field=${new_value}@" "$TOKEN_FILE"
        else
            sed -i "s@^$field=.*@$field=${new_value}@" "$TOKEN_FILE"
        fi
        if [ $? -ne 0 ]; then
            echo "Error: Failed to update $field token." >&2
            exit 1
        fi
    else
        echo "$field=${new_value}" >> "$TOKEN_FILE"
    fi
}

# Process commands
case "$cmd" in
  set)
    # Ensure exactly 3 arguments are present: command, flag, token_value.
    if [ "$#" -ne 3 ]; then
        echo "Error: Token value must be provided as a single string without spaces." >&2
        exit 1
    fi

    flag="$2"
    token_value="$3"

    # Check flag validity.
    if [ -z "$flag" ] || { [ "$flag" != "-gh" ] && [ "$flag" != "-gl" ]; }; then
        echo "Error: Missing or invalid flag. Use -gh or -gl." >&2
        exit 1
    fi

    # Ensure token_value does not contain spaces.
    if [[ "$token_value" =~ \  ]]; then
        echo "Error: Token value must be a single string without spaces." >&2
        exit 1
    fi

    # Update the appropriate token.
    if [ "$flag" = "-gh" ]; then
        update_token "GITHUB" "$token_value"
    elif [ "$flag" = "-gl" ]; then
        update_token "GITLAB" "$token_value"
    fi

    echo "Token updated successfully."
    exit 0
    ;;

  cp)
    flag="$2"

    if [ -z "$flag" ] || { [ "$flag" != "-gh" ] && [ "$flag" != "-gl" ]; }; then
        echo "Error: Missing or invalid flag for the 'cp' command. Use -gh or -gl." >&2
        exit 1
    fi

    if [ ! -f "$TOKEN_FILE" ]; then
        echo "Error: .gittoken file does not exist. Please add a token first using 'gittoken set'." >&2
        exit 1
    fi

    if [ "$flag" = "-gh" ]; then
        token=$(grep '^GITHUB=' "$TOKEN_FILE" | cut -d '=' -f2-)
    elif [ "$flag" = "-gl" ]; then
        token=$(grep '^GITLAB=' "$TOKEN_FILE" | cut -d '=' -f2-)
    fi

    if [ -z "$token" ]; then
        echo "Error: No token found for the selected flag ($flag)." >&2
        exit 1
    fi

    # Copy token to clipboard using xclip (Linux) or pbcopy (macOS)
    if command -v xclip >/dev/null 2>&1; then
        echo -n "$token" | xclip -selection clipboard
    elif command -v pbcopy >/dev/null 2>&1; then
        echo -n "$token" | pbcopy
    else
        echo "Error: No clipboard utility found. Please install xclip or pbcopy." >&2
        exit 1
    fi

    echo "Token copied to clipboard."
    exit 0
    ;;

  *)
    echo "Error: Unknown command \"$cmd\"." >&2
    show_usage
    exit 1
    ;;
esac

