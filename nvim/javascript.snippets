snippet im "Import statement"
import { $2 } from '${1:module}'$0
endsnippet

snippet imas "Import * as statement"
import * as $2 from '${1:module}'$0
endsnippet

snippet ex "Export statement"
export {
	$1
}$0
endsnippet

snippet exf "Export from ... statement"
export { $2 } from '${1:module}'$0
endsnippet

snippet me "module.exports"
module.exports$0
endsnippet

snippet re "Require statement"
require('${1:module}')$0
endsnippet

snippet us "'use strict'; statement"
'use strict';
endsnippet

snippet var "Variable statement"
var ${1:name} = ${2:value}$0
endsnippet

snippet let "Let statement"
let ${1:name} = ${2:value}$0
endsnippet

snippet letcb "Let statement with curly braces"
let { ${1:name} } = ${2:value}$0
endsnippet

snippet const "Constant statement"
const ${1:name} = ${2:value}$0
endsnippet

snippet constcb "Constant statement with curly braces"
const { ${1:name} } = ${2:value}$0
endsnippet

snippet if "if statement"
if (${1:condition}) {
	$0
}
endsnippet

snippet fn "Function statement"
function ${1:name}(${2:param}) {
	$0
}
endsnippet

snippet cls "Class statement"
class ${1:ClassName} {
	$0
}
endsnippet

snippet clsx "Class that extends another class"
class ${1:ClassName} extends ${2:AnotherClass} {
	$0
}
endsnippet

snippet ct "Class constructor"
constructor(${1:...args}) {
	$0
}
endsnippet

snippet cts "Class constructor with super() call"
constructor(${1:...args}) {
	super($1);

	$0
}
endsnippet

snippet mt "Class method"
${1:methodName}(${2:param}) {
	$0
}
endsnippet

snippet sw "Switch statement"
switch (${1:variable}) {
	case ${2:value}:
	$0
	break;
	default:
	return $3;
}
endsnippet

snippet de "debugger; statement"
debugger;
endsnippet

snippet cl "console.log() statement"
console.log(${1:value})$0
endsnippet

snippet ci "console.info() statement"
console.info(${1:value})$0
endsnippet

snippet cw "console.warn() statement"
console.warn(${1:value})$0
endsnippet

snippet ce "console.error() statement"
console.error(${1:value})$0
endsnippet

##########
# react.js
##########

snippet rcc "React component"
import React, { Component } from 'react'

class ${1:ComponentName} extends Component {
	render() {
		return (
			$0
		);
	}
}

export {
	$1
}
endsnippet

snippet rcsf "React stateless function"
import React from 'react'

const ${1:ComponentName} = ${2:props} => $0

export {
	$1
}
endsnippet

snippet rcpt "propTypes"
${1:ComponentName}.propTypes = {
	${2:propName}: ${3:type}
}$0
endsnippet

snippet rcdp "defaultProps"
${1:ComponentName}.defaultProps = {
	${2:propName}: ${3:value}
}$0
endsnippet
