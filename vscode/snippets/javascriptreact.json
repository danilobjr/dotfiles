{
  "import": {
    "prefix": "im",
    "description": "Import statement",
    "body": "import { $0 } from '${1:module}'"
  },
  "import * as": {
    "prefix": "imas",
    "description": "Import * as statement",
    "body": "import * as $0 from '${1:module}'"
  },
  "require": {
    "prefix": "re",
    "description": "Require statement",
    "body": "require('${1:module}')$0"
  },
  "export * from": {
    "prefix": "exa",
    "description": "export * from",
    "body": "export * from '${1:module}'"
  },
  "use strict": {
    "prefix": "us",
    "description": "'use strict' statement",
    "body": "'use strict'"
  },
  "var": {
    "prefix": "var",
    "description": "Variable statement",
    "body": "var ${2:name} = ${1:value}$0"
  },
  "let": {
    "prefix": "let",
    "description": "Let variable statement",
    "body": "let ${2:name} = ${1:value}$0"
  },
  "constant": {
    "prefix": "const",
    "description": "Constant statement",
    "body": "const ${2:name} = ${1:value}$0"
  },
  "function": {
    "prefix": "fn",
    "description": "Function statement",
    "body": ["function ${name}(${param}) {", "\t$0", "}"]
  },
  "class": {
    "prefix": "cls",
    "description": "Class",
    "body": ["class ${Name} {", "\t$0", "}"]
  },
  "class that extends another class": {
    "prefix": "clsx",
    "description": "Class that extends another class",
    "body": ["class ${Name} extends ${AnotherClass} {", "\t$0", "}"]
  },
  "constructor simple": {
    "prefix": "ct",
    "description": "Class constructor",
    "body": ["constructor(${...args}) {", "\t$0", "}"]
  },
  "constructor with super()": {
    "prefix": "cts",
    "description": "Class constructor with super() call",
    "body": [
      "constructor(${...args}) {",
      "\tsuper(${...args})",
      "",
      "\t$0",
      "}"
    ]
  },
  "method class": {
    "prefix": "mt",
    "description": "Class method",
    "body": ["${name}(${param}) {", "\t$0", "}"]
  },
  "method class using as arrow function": {
    "prefix": "mta",
    "description": "Class method as arrow function",
    "body": ["${1:name} = (${2:param})$3 => $0"]
  },
  "switch": {
    "prefix": "sw",
    "description": "Switch statement",
    "body": [
      "switch (${variable}) {",
      "\tcase ${value}:",
      "\t\t$0",
      "\t\tbreak",
      "\tdefault:",
      "\t\treturn $1",
      "}"
    ]
  },
  "debugger": {
    "prefix": "de",
    "description": "debugger statement",
    "body": "debugger"
  },
  "console log": {
    "prefix": "cl",
    "description": "console.log() statement",
    "body": "console.log(${value})"
  },
  "console info": {
    "prefix": "ci",
    "description": "console.info() statement",
    "body": "console.info(${value})"
  },
  "console warn": {
    "prefix": "cw",
    "description": "console.warn() statement",
    "body": "console.warn(${value})"
  },
  "console error": {
    "prefix": "ce",
    "description": "console.error() statement",
    "body": "console.error(${value})"
  },
  "react component": {
    "prefix": "rc",
    "description": "React component",
    "body": [
      "export class ${ComponentName} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t)",
      "\t}",
      "}"
    ]
  },
  "stateless functional react component": {
    "prefix": "sfc",
    "description": "Stateless functional react component",
    "body": ["const ${Name} = (${props}) => $0"]
  },
  "componentDidMount": {
    "prefix": "cdm",
    "description": "componentDidMount() - React lifecycle method",
    "body": ["componentDidMount() {", "\t$0", "}"]
  },
  "prop types": {
    "prefix": "pt",
    "description": "propTypes for React component",
    "body": [
      "${ComponentName}.propTypes = {",
      "\t${propName}: PropTypes.${type}",
      "}"
    ]
  }
}
